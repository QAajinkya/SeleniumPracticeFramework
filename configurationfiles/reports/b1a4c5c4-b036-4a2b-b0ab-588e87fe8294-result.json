{"name": "test_userAccountCreate", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <pages.userRegistrationScreen.CreateAccount object at 0x0000015F7C37ADA0>\ntext = 'April', locatorvalue = \"//select[@id='months']\", locatortype = 'xpath'\n\n    def get_Option_by_Text_value(self, text, locatorvalue, locatortype=\"xpath\"):\n        element = None\n        try:\n            locatortype = locatortype.lower()\n            element = self.get_element(locatorvalue, locatortype)\n            select = Select(element)\n            dd_v = select.options\n            for dd_values in dd_v:\n                print(dd_values.text)\n            print(text)\n>           select.select_by_visible_text(text)\n\n..\\base\\basefile.py:246: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.select.Select object at 0x0000015F7C37B940>\ntext = 'April'\n\n    def select_by_visible_text(self, text):\n        \"\"\"Select all options that display text matching the argument. That is, when given \"Bar\" this\n           would select an option like:\n    \n            <option value=\"foo\">Bar</option>\n    \n           :Args:\n            - text - The visible text to match against\n    \n            throws NoSuchElementException If there is no option with specified text in SELECT\n           \"\"\"\n        xpath = \".//option[normalize-space(.) = %s]\" % self._escapeString(text)\n        opts = self._el.find_elements(By.XPATH, xpath)\n        matched = False\n        for opt in opts:\n            self._setSelected(opt)\n            if not self.is_multiple:\n                return\n            matched = True\n    \n        if len(opts) == 0 and \" \" in text:\n            subStringWithoutSpace = self._get_longest_token(text)\n            if subStringWithoutSpace == \"\":\n                candidates = self.options\n            else:\n                xpath = \".//option[contains(.,%s)]\" % self._escapeString(subStringWithoutSpace)\n                candidates = self._el.find_elements(By.XPATH, xpath)\n            for candidate in candidates:\n                if text == candidate.text:\n                    self._setSelected(candidate)\n                    if not self.is_multiple:\n                        return\n                    matched = True\n    \n        if not matched:\n>           raise NoSuchElementException(\"Could not locate element with visible text: %s\" % text)\nE           selenium.common.exceptions.NoSuchElementException: Message: Could not locate element with visible text: April\n\nC:\\Users\\ajinkyas.shukla_info\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\support\\select.py:141: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test.CreateAccounttest.CreateAccountTest testMethod=test_userAccountCreate>\n\n    @pytest.mark.run(order=3)\n    def test_userAccountCreate(self):\n        cl.allureLogs(\"User Account Creation Started\")\n        self.ca.verifyCreateAccountPageLoaded()\n        time.sleep(6)\n        self.ca.selectGenderAsMale()\n        self.ca.enterFirstName()\n        self.ca.enterLastName()\n        self.ca.enterPassword()\n        self.ca.dateSelect()\n>       self.ca.monthSelect()\n\n..\\test\\CreateAccounttest.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\userRegistrationScreen.py:68: in monthSelect\n    self.get_Option_by_Text_value('April', self._enterMonth, \"xpath\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.userRegistrationScreen.CreateAccount object at 0x0000015F7C37ADA0>\ntext = 'April', locatorvalue = \"//select[@id='months']\", locatortype = 'xpath'\n\n    def get_Option_by_Text_value(self, text, locatorvalue, locatortype=\"xpath\"):\n        element = None\n        try:\n            locatortype = locatortype.lower()\n            element = self.get_element(locatorvalue, locatortype)\n            select = Select(element)\n            dd_v = select.options\n            for dd_values in dd_v:\n                print(dd_values.text)\n            print(text)\n            select.select_by_visible_text(text)\n    \n            print(\n                \"selected the element from dropdown locatortype: \" + locatortype + \" and with the locatorvalue :\" + locatorvalue)\n        except:\n            print(\n                \"unable to select the element with locatortype: \" + locatortype + \" and with the locatorvalue :\" + locatorvalue)\n            self.take_screenshot(\"Screenshots\")\n>           assert False\nE           AssertionError\n\n..\\base\\basefile.py:254: AssertionError"}, "steps": [{"name": "User Account Creation Started", "status": "passed", "start": 1658834601028, "stop": 1658834601028}, {"name": "********Verified as Home Page is loaded and displayed******", "status": "passed", "start": 1658834603156, "stop": 1658834603156}, {"name": "********Verified as Home Page is loaded and displayed******", "status": "passed", "start": 1658834609252, "stop": 1658834609252}], "attachments": [{"name": "Screenshots", "source": "ba375453-1705-4053-a395-f58e026e4ae4-attachment.png", "type": "image/png"}, {"name": "stdout", "source": "946d229e-abe5-4b11-af02-a74141e7b51e-attachment.txt", "type": "text/plain"}], "start": 1658834601028, "stop": 1658834611575, "uuid": "9ce649e6-f61b-42f5-bd7e-95798aeed2eb", "historyId": "404e75022f5e24c1b43dc1c39af5a004", "testCaseId": "6b243b58d86420990eae2af8969b97b1", "fullName": "test.TestSuite.CreateAccountTest#test_userAccountCreate", "labels": [{"name": "tag", "value": "run(order=3)"}, {"name": "tag", "value": "@pytest.mark.usefixtures('beforeClass', 'beforeMethod')"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "TestSuite"}, {"name": "subSuite", "value": "CreateAccountTest"}, {"name": "host", "value": "IB-SEZ-LAP-826"}, {"name": "thread", "value": "1028-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.TestSuite"}]}