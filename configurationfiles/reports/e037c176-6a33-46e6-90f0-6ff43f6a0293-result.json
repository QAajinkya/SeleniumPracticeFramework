{"name": "test_HomePage", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=103.0.5060.134)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x01135FD3+2187219]\n\tOrdinal0 [0x010CE6D1+1763025]\n\tOrdinal0 [0x00FE3E78+802424]\n\tOrdinal0 [0x00FCC680+706176]\n\tOrdinal0 [0x0102F519+1111321]\n\tOrdinal0 [0x0103C762+1165154]\n\tOrdinal0 [0x0102C9A6+1100198]\n\tOrdinal0 [0x01006F80+946048]\n\tOrdinal0 [0x01007E76+949878]\n\tGetHandleVerifier [0x013D90C2+2721218]\n\tGetHandleVerifier [0x013CAAF0+2662384]\n\tGetHandleVerifier [0x011C137A+526458]\n\tGetHandleVerifier [0x011C0416+522518]\n\tOrdinal0 [0x010D4EAB+1789611]\n\tOrdinal0 [0x010D97A8+1808296]\n\tOrdinal0 [0x010D9895+1808533]\n\tOrdinal0 [0x010E26C1+1844929]\n\tBaseThreadInitThunk [0x761DFA29+25]\n\tRtlGetAppContainerNamedObjectPath [0x77BB7A7E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77BB7A4E+238]", "trace": "self = <test.test_signInPage.SignInTest testMethod=test_HomePage>\n\n    @pytest.mark.run(order=1)\n    def test_HomePage(self):\n        self.sp.verifyHomePageLoaded()\n        time.sleep(3)\n        self.sp.clickOnSignin()\n>       self.sp.verifyLoginFormloaded()\n\n..\\test\\test_signInPage.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\navigateToUserRegistration.py:32: in verifyLoginFormloaded\n    formDisp = self.isElementDisplayed(self._signinPageDis, \"id\")\n..\\base\\basefile.py:138: in isElementDisplayed\n    self.takeScreenshot(locatorType)\n..\\base\\basefile.py:155: in takeScreenshot\n    allure.attach(self.driver.get_screenshot_as_png(), name=screenshot, attachment_type=AttachmentType.PNG)\nC:\\Users\\ajinkyas.shukla_info\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1358: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode('ascii'))\nC:\\Users\\ajinkyas.shukla_info\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1370: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)['value']\nC:\\Users\\ajinkyas.shukla_info\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:430: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000017FE666BB80>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77BB7A7E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77BB7A4E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=103.0.5060.134)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x01135FD3+2187219]\nE       \tOrdinal0 [0x010CE6D1+1763025]\nE       \tOrdinal0 [0x00FE3E78+802424]\nE       \tOrdinal0 [0x00FCC680+706176]\nE       \tOrdinal0 [0x0102F519+1111321]\nE       \tOrdinal0 [0x0103C762+1165154]\nE       \tOrdinal0 [0x0102C9A6+1100198]\nE       \tOrdinal0 [0x01006F80+946048]\nE       \tOrdinal0 [0x01007E76+949878]\nE       \tGetHandleVerifier [0x013D90C2+2721218]\nE       \tGetHandleVerifier [0x013CAAF0+2662384]\nE       \tGetHandleVerifier [0x011C137A+526458]\nE       \tGetHandleVerifier [0x011C0416+522518]\nE       \tOrdinal0 [0x010D4EAB+1789611]\nE       \tOrdinal0 [0x010D97A8+1808296]\nE       \tOrdinal0 [0x010D9895+1808533]\nE       \tOrdinal0 [0x010E26C1+1844929]\nE       \tBaseThreadInitThunk [0x761DFA29+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77BB7A7E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77BB7A4E+238]\n\nC:\\Users\\ajinkyas.shukla_info\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: NoSuchWindowException"}, "steps": [{"name": "****Verified as Home Page is loaded and displayed*********", "status": "passed", "start": 1658752750232, "stop": 1658752750232}, {"name": "*****Clicked on the Signin button on the Homepage*****", "status": "passed", "start": 1658752758199, "stop": 1658752758199}], "attachments": [{"name": "class", "source": "71f282b2-d5db-4f42-84f5-395c93327297-attachment.png", "type": "image/png"}, {"name": "log", "source": "9293d5b2-29dc-45c5-a454-ec3e7c8ae50d-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "cc9d362f-c769-4693-89c0-56f311644a26-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "a48d24b6-4d18-4f1d-8d74-7002930517b6-attachment.txt", "type": "text/plain"}], "start": 1658752749727, "stop": 1658752759291, "uuid": "2a854130-5b5a-43f1-8769-31b46d109434", "historyId": "711457646c9dbecc7d78f4ee69336fad", "testCaseId": "d7a6260067f1fae6fe40f54fdea366cc", "fullName": "test.TestSuite.SignInTest#test_HomePage", "labels": [{"name": "tag", "value": "run(order=1)"}, {"name": "tag", "value": "@pytest.mark.usefixtures('beforeClass', 'beforeMethod')"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "TestSuite"}, {"name": "subSuite", "value": "SignInTest"}, {"name": "host", "value": "IB-SEZ-LAP-826"}, {"name": "thread", "value": "20304-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.TestSuite"}]}