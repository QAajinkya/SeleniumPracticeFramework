{"name": "test_userAccountCreate", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <pages.userRegistrationScreen.CreateAccount object at 0x000001ADE94742E0>\nlocatorValue = 'passwd ', locatorType = 'id'\n\n    def waitForElement(self, locatorValue, locatorType=\"id\"):\n        webElement = None\n        try:\n            locatorType = locatorType.lower()\n            locatorByType = self.getLocatorType(locatorType)\n            wait = WebDriverWait(self.driver, 35, poll_frequency=1,\n                                 ignored_exceptions=[ElementNotVisibleException, NoSuchElementException])\n>           webElement = wait.until(ec.presence_of_element_located((locatorByType, locatorValue)))\n\n..\\base\\basefile.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"c948d2dd3df1b95ba6cf9478442ba2e6\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x000001ADE947B7F0>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except InvalidSelectorException as e:\n                raise e\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00405FD3+2187219]\nE       \tOrdinal0 [0x0039E6D1+1763025]\nE       \tOrdinal0 [0x002B3E78+802424]\nE       \tOrdinal0 [0x002E1C10+990224]\nE       \tOrdinal0 [0x002E1EAB+990891]\nE       \tOrdinal0 [0x0030EC92+1174674]\nE       \tOrdinal0 [0x002FCBD4+1100756]\nE       \tOrdinal0 [0x0030CFC2+1167298]\nE       \tOrdinal0 [0x002FC9A6+1100198]\nE       \tOrdinal0 [0x002D6F80+946048]\nE       \tOrdinal0 [0x002D7E76+949878]\nE       \tGetHandleVerifier [0x006A90C2+2721218]\nE       \tGetHandleVerifier [0x0069AAF0+2662384]\nE       \tGetHandleVerifier [0x0049137A+526458]\nE       \tGetHandleVerifier [0x00490416+522518]\nE       \tOrdinal0 [0x003A4EAB+1789611]\nE       \tOrdinal0 [0x003A97A8+1808296]\nE       \tOrdinal0 [0x003A9895+1808533]\nE       \tOrdinal0 [0x003B26C1+1844929]\nE       \tBaseThreadInitThunk [0x761DFA29+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77BB7A7E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77BB7A4E+238]\n\nC:\\Users\\ajinkyas.shukla_info\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:89: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <pages.userRegistrationScreen.CreateAccount object at 0x000001ADE94742E0>\ntext = '123456', locatorValue = 'passwd ', locatorType = 'id'\n\n    def sendText(self, text, locatorValue, locatorType=\"id\"):\n        try:\n            locatorType = locatorType.lower()\n>           webElement = self.waitForElement(locatorValue, locatorType)\n\n..\\base\\basefile.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.userRegistrationScreen.CreateAccount object at 0x000001ADE94742E0>\nlocatorValue = 'passwd ', locatorType = 'id'\n\n    def waitForElement(self, locatorValue, locatorType=\"id\"):\n        webElement = None\n        try:\n            locatorType = locatorType.lower()\n            locatorByType = self.getLocatorType(locatorType)\n            wait = WebDriverWait(self.driver, 35, poll_frequency=1,\n                                 ignored_exceptions=[ElementNotVisibleException, NoSuchElementException])\n            webElement = wait.until(ec.presence_of_element_located((locatorByType, locatorValue)))\n            self.log.info(\"WebElement found with locator value \" + locatorValue + \" using locatorType \" + locatorType)\n        except:\n            self.log.error(\n                \"WebElement not found with locator value \" + locatorValue + \" using locatorType \" + locatorType)\n            print_stack()\n            self.takeScreenshot(locatorType)\n>           assert False\nE           AssertionError\n\n..\\base\\basefile.py:80: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test.CreateAccounttest.CreateAccountTest testMethod=test_userAccountCreate>\n\n    @pytest.mark.run(order=3)\n    def test_userAccountCreate(self):\n        cl.allureLogs(\"User Account Creation Started\")\n        self.ca.verifyCreateAccountPageLoaded()\n        time.sleep(6)\n        self.ca.selectGenderAsMale()\n        self.ca.enterFirstName()\n        self.ca.enterLastName()\n>       self.ca.enterPassword()\n\n..\\test\\CreateAccounttest.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\userRegistrationScreen.py:62: in enterPassword\n    self.sendText(\"123456\", self._enterPassword, \"id\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.userRegistrationScreen.CreateAccount object at 0x000001ADE94742E0>\ntext = '123456', locatorValue = 'passwd ', locatorType = 'id'\n\n    def sendText(self, text, locatorValue, locatorType=\"id\"):\n        try:\n            locatorType = locatorType.lower()\n            webElement = self.waitForElement(locatorValue, locatorType)\n            webElement.send_keys(text)\n            self.log.info(\n                \"Sent the text \" + text + \" in WebElement with locator value \" + locatorValue + \" using locatorType \" + locatorType)\n        except:\n            self.log.error(\n                \"Unable to Sent the text \" + text + \" in WebElement with locator value \" + locatorValue + \"using locatorType \" + locatorType)\n            print_stack()\n            self.takeScreenshot(locatorType)\n>           assert False\nE           AssertionError\n\n..\\base\\basefile.py:109: AssertionError"}, "steps": [{"name": "User Account Creation Started", "status": "passed", "start": 1658812714126, "stop": 1658812714126}, {"name": "********Verified as Home Page is loaded and displayed******", "status": "passed", "start": 1658812720540, "stop": 1658812720540}, {"name": "********Verified as Home Page is loaded and displayed******", "status": "passed", "start": 1658812726632, "stop": 1658812726632}], "attachments": [{"name": "id", "source": "30dc846d-7b62-452e-9ef9-c8e2b95da38b-attachment.png", "type": "image/png"}, {"name": "id", "source": "475b2a54-fa83-448c-af30-bca9b56c3973-attachment.png", "type": "image/png"}, {"name": "id", "source": "a03c223b-1f56-4bc5-865e-62b01fbb6aa2-attachment.png", "type": "image/png"}, {"name": "log", "source": "fce82606-745b-439b-a893-dc7d0c4b760f-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "fa501693-ffb5-4988-9317-49a4a0072395-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "9a76b6bd-f24d-4825-b297-a423f79ab233-attachment.txt", "type": "text/plain"}], "start": 1658812714126, "stop": 1658812762973, "uuid": "35b9b6b0-d1f0-4e42-bcbd-9ee01824aed7", "historyId": "404e75022f5e24c1b43dc1c39af5a004", "testCaseId": "6b243b58d86420990eae2af8969b97b1", "fullName": "test.TestSuite.CreateAccountTest#test_userAccountCreate", "labels": [{"name": "tag", "value": "run(order=3)"}, {"name": "tag", "value": "@pytest.mark.usefixtures('beforeClass', 'beforeMethod')"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "TestSuite"}, {"name": "subSuite", "value": "CreateAccountTest"}, {"name": "host", "value": "IB-SEZ-LAP-826"}, {"name": "thread", "value": "20080-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.TestSuite"}]}